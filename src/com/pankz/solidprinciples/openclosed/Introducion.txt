As the name suggests, this principle states that software entities should be open for extension,
 but closed for modification.
 As a result, when the business requirements change then the entity can be extended, but not modified.


  In a nutshell, the developer must need to change only a specific part of the code (a class or a function)
   every time a requirement changes.

 Thatâ€™s why Robert C. Martin and others redefined the Open/Closed Principle to the Polymorphic Open/Closed Principle.
 It uses interfaces instead of superclasses to allow different implementations which you can easily substitute without changing the code that uses them.
 The interfaces are closed for modifications,
  and you can provide new implementations to extend the functionality of your software.



  Simple Scenario of open closed--->
  Let's take the same example of Database Connection Provider, ideal we can have a connection to any RDBMS data source as per our requirements.
  Let's design or develop source code using this design principle.
  Code for the interface so first create IConnetionProvider interface and create a separate class to implement this interface for each database connection like H2ConnectionProvider, MySQLConnectionProvider.
  In future, if Client wants to connect MS-Server or Oracle then we need to create the class like MsServerConnectionProvider or OracleConnectionProvider and just implement IConnectionProviderinterface that's it.
  we are not modifying existing code here, we are just extending as per our requirement.